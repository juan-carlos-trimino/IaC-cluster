# For the default values, go to:
# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
#
additionalArguments:
  # For a list of all settings, go to:
  # (https://doc.traefik.io/traefik/reference/static-configuration/cli/)
  # (https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#annotations).
  # Enable api/dashboard.
  - "--api"
  # Activate dashboard.
  # With Dashboard enabled, the router rule must catch requests for both /api and /dashboard.
  - "--api.dashboard=true"
  # Activate API directly on the entryPoint named traefik.
  - "--api.insecure=false"
  # Traefik will listen to incoming request on the port 80 (http).
  - "--entrypoints.web.address=:80"
  # Targeted entry point of the redirection.
  - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
  # Scheme used for the redirection.
  - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
  - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
  # Traefik will listen to incoming request on the port 443 (https).
  - "--entrypoints.websecure.address=:443"
  # Default TLS configuration for the routers linked to the entry point.
  - "--entrypoints.websecure.http.tls=true"
  - "--entrypoints.websecure.http.tls.certresolver=le"
  # Traefik log settings.
  - "--log=true"
  # - "--log.level=INFO"
  - "--log.level=DEBUG"
  # Prometheus metrics exporter type.
  - "--metrics.prometheus=true"
  # Enable Kubernetes backend with default settings.
  - "--providers.kubernetescrd=true"
  - "--providers.kubernetesingress=true"
  # Value of kubernetes.io/ingress.class annotation or IngressClass name to watch for.
  # (https://cert-manager.io/docs/installation/upgrading/ingress-class-compatibility/#traefik)
  # - "--providers.kubernetesingress.ingressclass=traefik-cert-manager"
  - "--providers.kubernetesingress.ingressclass=traefik"
  # Enable ping.
  # - "--ping"
  # Enable ACME (Let's Encrypt): automatic SSL.
  # Email address used for registration.
  - "--certificatesresolvers.le.acme.email=juancarlos@trimino.com"
  # File or key used for certificates storage (PV).
  - "--certificatesresolvers.le.acme.storage=/traefik-certs/acme.json"
  # CA server to use; the default is staging.
  # The staging environment will not issue trusted certificates but is used to ensure that the
  # verification process is working properly before moving to production. Let's Encrypt's
  # production environment imposes much stricter rate limits, so to reduce the chance of you
  # hitting those limits it is highly recommended to start by using the staging environment. To
  # move to production, simply create a new Issuer with the URL set to
  # https://acme-v02.api.letsencrypt.org/directory.
  # Production.
  # - "--certificatesresolvers.le.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
  # Staging.
  - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
  # Certificates' duration in hours.
  # Let's Encrypt certificates' duration defaults to 2160 hours (90 days).
  - "--certificatesresolvers.le.acme.certificatesDuration=2160"
  # Preferred chain to use.
  # If the CA offers multiple certificate chains, prefer the chain with an issuer matching this
  # Subject Common Name. If no match, the default offered chain will be used.
  - "--certificatesresolvers.le.acme.preferredchain=ISRG Root X1"
  # KeyType to use.
  # Available values: "EC256", "EC384", "RSA2048", "RSA4096", "RSA8192"
  - "--certificatesresolvers.le.acme.keytype=RSA4096"
  # Use the TLS-ALPN-01 challenge to generate and renew ACME certificates by provisioning a TLS
  # certificate. When using the TLS-ALPN-01 challenge, Traefik must be reachable by Let's Encrypt
  # through port 443.
  - "--certificatesresolvers.le.acme.tlschallenge=false"
  - "--certificatesresolvers.le.acme.httpchallenge=false"
  # Use a DNS-01 ACME challenge rather than HTTP-01 challenge; enable a dns challenge named "le".
  # Note: mandatory for wildcard certificate generation.
  - "--certificatesresolvers.le.acme.dnschallenge=true"
  # DNS provider used.
  - "--certificatesresolvers.le.acme.dnschallenge.provider=digitalocean"
  # By default, the provider will verify the TXT DNS challenge record before letting ACME verify.
  # If delayBeforeCheck is greater than zero, this check is delayed for the configured duration in
  # seconds. Useful if internal networks block external DNS queries.
  # To delay DNS checks and reduce Let's Encrypt hit-rate.
  - "--certificatesresolvers.le.acme.dnschallenge.delaybeforecheck=0"
  # Use the following DNS servers to resolve the FQDN authority.
  # Digital Ocean -> ns1.digitalocean.com (173.245.58.51), ns2.digitalocean.com (173.245.59.41),
  # and ns3.digitalocean.com (198.41.222.173).
  # Cloudflare in partnership with APNIC -> 1.1.1.1,1.0.0.1
  # Google -> 8.8.8.8
  - "--certificatesresolvers.le.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53,8.8.8.8:53"
#


# Environment variables to be passed to Traefik's binary
env:
  - name: DO_AUTH_TOKEN
    value: "dop_v1_1bcbec15f7fa78b81b0c972945e2515f36d9d0e1d30fc677800398b225c68f8d"
# - name: SOME_VAR_FROM_CONFIG_MAP
#   valueFrom:
#     configMapRef:
#       name: configmap-name
#       key: config-key
# - name: SOME_SECRET
#   valueFrom:
#     secretKeyRef:
#       name: secret-name
#       key: secret-key





deployment:
  enabled: true
  replicas: 1
  # initContainers:
  #   # The "volume-permissions" init container is required if you run into permission issues.
  #   # Related issue: https://github.com/containous/traefik/issues/6972
  #   - name: volume-permissions
  #     image: busybox:latest
  #     command: ["sh", "-c", "chmod -Rv 600 /traefik-certs/*"]
  #     volumeMounts:
  #       - name: traefik-certs
  #         mountPath: /traefik-certs
# Set Traefik as the default Ingress Controller (as per Kubernetes 1.19+ changes).
ingressClass:
  enabled: true
  isDefaultClass: true
# Create an IngressRoute for the dashboard.
ingressRoute:
  dashboard:
    # Using a custom ingressRoute with basic auth instead of the default.
    enabled: false
    # enabled: true
    # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class).
    annotations: {}
    # annotations: { traefik.ingress.kubernetes.io/router.tls: "true" }
    # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels).
    labels: {}
# https://docs.traefik.io/observability/logs/logs/
logs:
  access:
    enabled: true
    format: json
  general:
    # level: INFO
    level: DEBUG
# Persistent Storage.
persistence:
  enabled: true
  name: traefik-certs
  accessMode: ReadWriteOnce
  size: 1Gi
  path: /traefik-certs
#
# podSecurityContext:
#   fsGroup: 1100
#
ports:
  metrics:
    port: 9100
    # See traefik.
    expose: false
    # The exposed port for this service.
    exposedPort: 9100
  traefik:
    port: 9000
    # DO NOT expose the traefik port on production deployments. To access it from outside of the
    # cluster, use `kubectl port-forward` or create a secure ingress.
    # $ kubectl port-forward -n memories $(kubectl get pods -n memories --selector "app.kubernetes.io/name=traefik" --output=name) 9000:9000
    # From a browser, use http://127.0.0.1:9000/dashboard/ to see the Traefik dashboard; the trailing slash / in /dashboard/ is mandatory.
    expose: false
    # The exposed port for this service.
    exposedPort: 9000
  web:
    port: 80  # Traefik port.
    expose: true
    exposedPort: 80
    # (Optional) Permanent Redirect to HTTPS.
    redirectTo: websecure
  websecure:
    port: 443
    expose: true
    exposedPort: 443
    tls:
      enabled: true
      # (Optional) Set a default certificate resolver.
      certResolver: digitalocean



providers:
  file:
    directory: "/etc/traefik/values.yaml"


# Whether Role Based Access Control objects like roles and rolebindings should be created.
rbac:
  enabled: true
  # If set to false, installs ClusterRole and ClusterRoleBinding so Traefik can be used across
  # namespaces.
  # If set to true, installs namespace-specific Role and RoleBinding and requires provider
  # configuration be set to that same namespace.
  namespaced: false
#
resources:
  # requests:
  #   cpu: "500m"
  #   memory: "150Mi"
  limits:
    cpu: "500m"
    memory: "500Mi"
# Set the container security context.
# To run the container with ports below 1024 this will need to be adjust to run as root.
securityContext:
  capabilities:
    drop: [ALL]
    add: [NET_BIND_SERVICE]
  readOnlyRootFilesystem: true
  # readOnlyRootFilesystem: false
  runAsGroup: 0
  runAsNonRoot: false
  runAsUser: 0
# The service account the pods will use to interact with the Kubernetes API.
serviceAccount:
  # If set, an existing service account is used.
  # If not set, a service account is created automatically using the fullname template.
  # name: ""
  name: "mem-traefik-service-account"
